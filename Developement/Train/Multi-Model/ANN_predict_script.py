# -*- coding: utf-8 -*-
"""ANN Model Prediction Script.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VKoTzidl7F98c7diDoEsjvezK7RzYU1F
"""

import pandas as pd
import numpy as np
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
import torch

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
device

class ANN(nn.Module):
    def __init__(self):
        super(ANN, self).__init__()
        layers = []
        layers.append(nn.Linear(8, 16))
        layers.append(nn.ReLU())
        layers.append(nn.Linear(16, 16))
        layers.append(nn.ReLU())
        layers.append(nn.Linear(16, 1))
        layers.append(nn.Sigmoid())
        self.network = nn.Sequential(*layers)

    def forward(self, x):
        return self.network(x)


def load_model(model_path):
  model = ANN()
  model.load_state_dict(torch.load(model_path, map_location='cpu'))  # Load the model's state_dict
  model.eval()  # Set the model to evaluation mode
  return model

def predict(model, X):
    # predict the output
    X_tensor = torch.tensor(X, dtype=torch.float32)
    probablity = model(X_tensor).detach()
    if probablity > 0.5:
        output = 1
        if probablity > 1:
            probablity = 1
    else:
        output = 0
        if probablity < 0:
            probablity = 0

    return output, probablity

# main
model_path = 'models/ANN_model.pth' # provide the model path here
data = np.load('data/X.npz') # provide the input data here
X = data['data']

# storing the output in variables
model = load_model(model_path)
output, probablity = predict(model, X[0])
probablity = probablity[0]

# printing the output data
print(f"output: {output}")
print(f"probablity: {probablity}")

